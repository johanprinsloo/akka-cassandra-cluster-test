kamon {
  spray {
    # Header name used when propagating the `TraceContext.token` value across applications.
    trace-token-header-name = "X-Trace-Token"

    # When set to true, Kamon will automatically set and propogate the `TraceContext.token` value under the following
    # conditions:
    #  - When a server side request is received containing the trace token header, the new `TraceContext` will have that
    #    some token, and once the response to that request is ready, the trace token header is also included in the
    #    response.
    #  - When a spray-client request is issued and a `TraceContext` is available, the trace token header will be included
    #    in the `HttpRequest` headers.
    automatic-trace-token-propagation = true


    client {
      # Strategy used for automatic trace segment generation when issue requests with spray-client. The possible values
      # are:
      #  - pipelining: measures the time during which the user application code is waiting for a spray-client request to
      #    complete, by attaching a callback to the Future[HttpResponse] returned by `spray.client.pipelining.sendReceive`.
      #    If `spray.client.pipelining.sendReceive` is not used, the segment measurement wont be performed.
      #  - internal: measures the internal time taken by spray-client to finish a request. Sometimes the user application
      #    code has a finite future timeout (like when using `spray.client.pipelining.sendReceive`) that doesn't match
      #    the actual amount of time spray might take internally to resolve a request, counting retries, redirects,
      #    connection timeouts and so on. If using the internal strategy, the measured time will include the entire time
      #    since the request has been received by the corresponding `HttpHostConnector` until a response is sent back
      #    to the requester.
      segment-collection-strategy = pipelining
    }
  }
  statsd {
    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "192.168.59.103"
    port = 8125

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 1 second

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    includes {
      actor       = [ "*" ]
      trace       = [ "*" ]
      dispatcher  = [ "*" ]
    }

    simple-metric-key-generator {
      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "kamon"
    }
  }
}
